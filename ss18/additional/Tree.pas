

(*  * Project: MathParser  * User: Niklas Vest  * Date: 06/05/2018  *) UNIT Tree; INTERFACE CONST   Expr = 'EXPR';   Term = 'TERM';   Fact = 'FACT';   Plus = '+';   Minus = '-';   Multiply = '*';   Divide = '/'; TYPE   NodePtr = ^Node;   Node = RECORD     firstChild, sibling: NodePtr;     val: STRING[10];   END;   FUNCTION InitTree: NodePtr;   FUNCTION ExtendSyntaxTreeBy(parent: NodePtr; val: STRING): NodePtr;   FUNCTION AppendSiblingToSyntaxTree(parent: NodePtr; val: STRING): NodePtr;   PROCEDURE PrintSyntaxTree;   PROCEDURE DisposeSyntaxTree; IMPLEMENTATION VAR   syntaxTree: NodePtr; FUNCTION CreateNode(val: STRING): NodePtr; VAR   n: NodePtr; BEGIN   New(n);   n^.val := val;   n^.firstChild := nil;   n^.sibling := nil;   CreateNode := n; END; FUNCTION InitTree: NodePtr; BEGIN   IF syntaxTree = NIL THEN BEGIN     syntaxTree := CreateNode(Expr);     InitTree := syntaxTree;   END; END; FUNCTION ExtendSyntaxTreeBy(parent: NodePtr; val: STRING): NodePtr; BEGIN   IF parent <> NIL THEN   BEGIN     parent^.firstChild := CreateNode(val);     ExtendSyntaxTreeBy := parent^.firstChild;   END   ELSE   BEGIN     WriteLn('ERROR: Specified parent node was null.');   END; END; FUNCTION AppendSiblingToSyntaxTree(parent: NodePtr; val: STRING): NodePtr; BEGIN   IF parent <> NIL THEN   BEGIN     parent^.sibling := CreateNode(val);     AppendSiblingToSyntaxTree := parent^.sibling;   END   ELSE   BEGIN     WriteLn('ERROR: Specified parent node was null.');   END; END; PROCEDURE PrintTree(n: NodePtr); BEGIN   IF n <> NIL THEN BEGIN     Write(n^.val);     IF n^.firstChild <> NIL THEN Write('(');     PrintTree(n^.firstChild);     IF n^.firstChild <> NIL THEN Write(')');     PrintTree(n^.sibling);   END; END; PROCEDURE PrintSyntaxTree; BEGIN   PrintTree(syntaxTree); END; PROCEDURE DisposeTree(VAR n: NodePtr); BEGIN   IF n <> NIL THEN BEGIN     IF n^.firstChild <> NIL THEN       DisposeTree(n^.firstChild);     IF n^.sibling <> NIL THEN       DisposeTree(n^.sibling);     Dispose(n);     n := NIL;   END; END; PROCEDURE DisposeSyntaxTree; BEGIN   DisposeTree(syntaxTree); END; BEGIN   syntaxTree := NIL; END.

 
